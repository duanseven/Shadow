using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Data;
using NSun.Data.Configuration;

namespace NSun.Data
{
    [Serializable]
    [DataContract(Namespace = "http://nsun-shadow.com")]
    [KnownType("KnownTypes")]
    public class IdQueryColumn : QueryColumn
    {
        internal bool AutoGenerated { get; set; }

        public IdQueryColumn(string columnName, DbType dbtype, bool autoGenerated = false)
            : base(columnName, dbtype)
        {
            AutoGenerated = autoGenerated;
        }

        #region KnownTypes

        static Type[] KnownTypes()
        {
            return KnownTypeRegistry.Instance.KnownTypes;
        }

        #endregion
    }
    [Serializable]
    [DataContract(Namespace = "http://nsun-shadow.com")]
    [KnownType("KnownTypes")]
    public class VersionQueryColumn : QueryColumn
    {
        public VersionQueryColumn(string columnName, DbType dbtype)
            : base(columnName, dbtype)
        {

        }

        #region KnownTypes

        static Type[] KnownTypes()
        {
            return KnownTypeRegistry.Instance.KnownTypes;
        }

        #endregion
    }
    
    [Serializable]
    [DataContract(Namespace = "http://nsun-shadow.com")]
    [KnownType("KnownTypes")]
    public class RelationQueryColumn : QueryColumn
    {
        internal Type RelationTable { get; set; }

        internal Type RelationOutTable { get; set; }

        internal RelationType RelationType { get; set; }

        internal QueryColumn RelationColumn { get; set; }

        internal QueryColumn RelationOutColumn { get; set; }

        internal QueryColumn RelationMappingColumn { get; set; }

        internal QueryColumn PkColumn { get; set; }

        internal bool IsRelationTable { get; set; }

        internal LoadType LoadRelationType { get; set; }

        public RelationQueryColumn(QueryColumn column, Type relationTable, QueryColumn relationColumn, RelationType relationType, LoadType relationtype = LoadType.Lazy, string propertyname = "")
            : base(string.Format("{0}_{1}", column.ColumnName, relationColumn.ColumnName), DbType.Object)
        //: base(column.ColumnName, DbType.Object)
        {
            PkColumn = column;
            RelationTable = relationTable;
            RelationType = relationType;
            RelationColumn = relationColumn;
            PropertyName = propertyname;
            IsRelationTable = false;
            LoadRelationType = relationtype;
        }

        public RelationQueryColumn(QueryColumn column, Type relationTable, Type relationOutTable, QueryColumn relationColumn, QueryColumn relationOutColumn, QueryColumn relationMappingColumn, RelationType relationType, LoadType relationtype = LoadType.Lazy, string propertyname = "")
            : this(column, relationTable, relationColumn, relationType, relationtype, propertyname)
        {
            RelationOutTable = relationOutTable;
            RelationOutColumn = relationOutColumn;
            RelationMappingColumn = relationMappingColumn;
            IsRelationTable = true;
        }

        #region KnownTypes

        static Type[] KnownTypes()
        {
            return KnownTypeRegistry.Instance.KnownTypes;
        }

        #endregion

        //public RelationQueryColumn(QueryColumn column, Type relationTable, string relationColumn, RelationType relationType, string propertyname = "")
        //    : base(string.Format("{0}_{1}", column.ColumnName, relationColumn
        //    ), DbType.Object)
        //{
        //    RelationTable = relationTable;
        //    RelationType = relationType; 

        //    foreach (System.Reflection.FieldInfo c in  relationTable.GetFields(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public |
        //                            System.Reflection.BindingFlags.Instance |
        //                            System.Reflection.BindingFlags.FlattenHierarchy))
        //    {
        //        if(c.Name.TrimStart('_','_').ToLower()==relationColumn.TrimStart('_','_').ToLower())
        //        {
        //            RelationColumn = (QueryColumn)c.GetValue(null);
        //            break;
        //        }
        //    } 
        //    PropertyName = propertyname;
        //}
    }
}
